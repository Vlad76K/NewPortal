D18.2 Сетевая модель OSI
-------------------------------------------------------------------------------
OSI (Open System Interconnection) — это сетевая модель, которая позволяет разделить описание сетевых протоколов
на несколько уровней, так чтобы разработчикам веб-сервисов (например, на Django) не приходилось думать о том, как
работает маршрутизация и как правильно обжимать провода в витой паре.

1. Физический уровень
На этом уровне описывается физические параметры сигналов, как передаются эти сигналы, частота, амплитуда и, прежде
всего, среда, по которой идут эти сигналы.
Единицей нагрузки на этом уровне является бит. Всё, что сложнее бита, обрабатывается на следующих уровнях.
Примеры протоколов физического уровня:
 - GSM, СDMA и другие — они используются для сотовой связи.
 - IEEE802.11 — также известный как Wi-Fi.
 - 100Base-T, 1000Base-T и другие — они используются в роутерах и сетевых картах при соединении кабелем.
 - USB — это тоже протокол физического уровня.

2. Канальный уровень
На этом уровне мы взаимодействуем с данными, которые получили на физическом уровне. Биты группируются в кадры, а кроме
того появляется адресация устройств. Адресация, правда, работает только в рамках одного сетевого сегмента и для такой
масштабной сети, как Интернет, нужно что-то посерьёзней.
На этом уровне работают сетевые коммутаторы, мосты и драйвера сетевых адаптеров.
К протоколам канального уровня можно отнести Ethernet, PPP.

3. Сетевой уровень
Кадры на этом уровне становятся пакетами, а адресация позволяет создать более сегмента.
Самый известный протокол сетевого уровня — это IP (Internet Protocol).
Этот протокол является маршрутизируемым и позволяет передавать данные через несколько маршрутизаторов.

4. Транспортный уровень
Пакеты на этом уровне группируются в датаграммы и сегменты, а также появляется понятие портов.
На этом уровне работают протоколы TCP и UDP.
TCP — более умный протокол, он контролирует, дошли ли данные до получателя, и передает их повторно или снижает
скорость соединения, если что-то идёт не так.
UDP же хорош, когда часть данных можно потерять, но важна стабильность передаваемого потока данных (например,
при видеосвязи).
В рамках этого курса мы работам столько с TCP, ведь именно он используется в работе веб-сайтов и сервисов.

Следующие три уровня работают с данными. Почти нигде и никогда уровни не разделены полностью, и почти все известные
протоколы затрагивают несколько уровней.

5. Сеансовый уровень
Управляет сеансом связи, обменом информации, правами.
Протоколы сеансового уровня — L2TP, PPTP. С ними вы могли иметь дело, если сами настраивали роутер.

6. Уровень представления
Этот уровень описывает формат передаваемых данных. Например html, jpeg, png, json.

7. Прикладной уровень
Очень широкий уровень: на нем работают самые разные сетевые протоколы, такие как POP и SMTP для электронной почты,
RDP для управления удаленным компьютером, ну и конечно же, HTTP и его более защищённый собрат HTTPS.
HTTP (Hyper Text Transfer Protocol) — протокол передачи гипертекста, именно с ним нам приходится взаимодействовать в
рамках курса.


Модель OSI можно сравнить с буррито: каждый следующий слой опирается на предыдущий и дополняет его.



D18.3 REST API
-------------------------------------------------------------------------------
С базовыми понятиями сетевого взаимодействия мы познакомились. Но работать нам придётся прежде всего с протоколом HTTP.

Основной идеей HTTP является то, что клиент (бразуер) шлёт к серверу сообщение, а веб-сервер на это сообщение отдаёт ответ.
HTTP-запрос можно представить в виде текста, который выглядит примерно так:
    GET /hello.htm HTTP/1.1
    Accept: text/html
    User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
    Host: localhost
    Accept-Language: en-us
    Connection: Keep-Alive

Разберём по строкам, что это означает.
 - GET /hello.htm HTTP/1.1
     Вы уже знакомы с методом GET. Первое слово в сообщении и означает, что мы шлём GET-запрос, а не какой-то ещё.
     После него идёт цель нашего запроса, а именно, путь /hello.html.
     Дальше идёт версия протокола.
 - Accept: text/html
     Формат, в котором браузер ожидает получить ответ.
 - User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
     Так сервис узнаёт о версии браузера. Так сложилось, что пока развивался Интернет одни браузеры притворялись
     другими, а потому эта строка выглядит уж очень запутанно. В данном случае используется древний браузер Internet
     Explorer 5.01, а значит, кому-то следовало бы его обновить.
 - Host: localhost
     Адрес хоста, на котором расположен сервер. Так бывает что на одном и том же физическом сервере находятся несколько
     веб-серверов. И благодаря этой строчке можно определить, к какому именно адресован этот запрос.
 - Accept-Language: en-us
     Пользователь может установить в настройках своего браузера, на каком языке ему приятнее читать сайты. А это даёт
     нам возможность оставить нашего пользователя довольным.
 - Connection: Keep-Alive
     Информируем сервер не закрывать ли соединение сразу после того, как ответ получен. Это позволяет загружать сразу
     несколько ресурсов (изображений, CSS и скриптов) гораздо быстрее, чем если открывать для каждого ресурса новое
     соединение

Так выглядит типичный GET-запрос, а теперь посмотрим на ответ.

    HTTP/1.1 200 OK
    Date: Mon, 27 Jul 2020 12:28:53 GMT
    Cache-Control: no-cache
    Last-Modified: Wed, 22 Jul 2019 19:15:56 GMT
    Content-Length: 37
    Content-Type: text/html
    Connection: Closed

    <html>
    <body>
    Hello!
    </body>
    </html>
Ответ в данном случае состоит из заголовка и тела. С телом, надеемся, всё понятно, это просто содержимое страницы.

А вот заголовок рассмотрим подробнее.

 - HTTP/1.1 200 OK
     Тут, как и раньше, описывается протокол и версия, по которому произошло. После него идёт код ответа 200,
     означающий, что всё в порядке. Ну и OK, чтобы было совсем понятно.

 - Date: Mon, 27 Jul 2020 12:28:53 GMT
     Дата и время ответа.
 - Cache-Control: no-cache
     Указываем браузеру, что эту страницу не нужно кешировать, она очень скоро может измениться.
 - Last-Modified: Wed, 22 Jul 2019 19:15:56 GMT
     Когда страница была изменена в последний раз.
 - Content-Length: 37
     Размер ответа в байтах. Он обычно нужен для очень больших файлов, чтобы можно было отслеживать когда же наконец он
     докачается (быть может вы видели, когда скачиваешь файл из Интернета, но совершенно непонятно, сколько ещё
     времени ждать).
 - Connection: Closed
     Информируем браузер, что мы закрыли соединение.

С GET запросом понятно, а как же быть с POST?

    POST /singup HTTP/1.1
    User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: length
    Accept-Language: en-us
    Connection: Keep-Alive
    username=theOne&email=theone@example.com

Надеюсь всё понятно, но в этом случае у нас тоже помимо заголовка появилось тело запроса. Это важное отличие POST от
GET, ведь POST может создавать данные, а не только получать их.

Теперь когда мы разобрались с GET и POST, стоит узнать и про другие методы:
 - GET — запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
 - HEAD — запрашивает ресурс так же, как и метод GET, но без тела ответа.
 - POST — используется для отправки сущностей к определенному ресурсу. Часто вызывает изменение состояния или какие-то
          побочные эффекты на сервере.
 - PUT — заменяет все текущие представления ресурса данными запроса.
 - DELETE — удаляет указанный ресурс.
 - OPTIONS — используется для описания параметров соединения с ресурсом.
 - PATCH — используется для частичного изменения ресурса.
Методы GET, PUT, HEAD, DELETE считаются идемпотентными. Можете не запоминать это сложное слово, но это означает, что
на одни и те же запросы должны приходить одни и те же ответы.

Слишком много методов, и не понятно, как с ними быть? Как раз для этого и придумали REST!


Что такое REST?
   REST расшифровывается как REpresentational State Transfer, что переводится как «передача состояния представления».
   REST — это архитектурный стиль взаимодействия компонентов по сети, например, бэкенда и фронтенда.
REST базируется на протоколе HTTP и использует методы HTTP для создания, удаления и изменения сущностей.
Можно было бы сказать, что REST — это протокол, построенный поверх HTTP, но для REST нет единого стандарта, как для
HTTP. Это скорее соглашение о том, как наилучшим образом его использовать.
Сервисы, построены по принципам REST, называют RESTful.

Зачем же он нужен?
Во-первых, чтобы разработчики, работающие над сервисом, могли быстро договориться, как должен происходить обмен
сообщениями. Это что-то вроде языка, на котором могут общаться разработчики различных компонентов.
Например, бэкендер использует и знает Python, фронтендер — JavaScript, мобильные разработчики знают Java или Swift, а
менеджер проекта когда-то знал С++, но уже давно забыл.
Но если все они знают, как устроен REST, то им будет гораздо проще понять друг друга и разработать идеальный API.

Принципы REST
1. Разделение архитектуры на клиента и сервер
2. Отсутствие состояния
     Сервер не знает ничего о состоянии клиента, а клиент о состоянии сервера.
3. Кэширование
     Клиент может кэшировать ответы сервера. Сервер же должен явно или неявно обозначать кэшируемые ответы.
4. Единообразие интерфейса
     REST описывает, в каком формате клиент должен отсылать запрос, а сервер отдавать.
5. Слои
     Это иерархическая архитектура ресурсов. Каждый слой содержит компоненты, которые используют сервисы компонентов ниже.
     Давайте рассмотрим реализацию на примере нашего новостного сервиса. Мы можем представить эту структуру слоёв как
     Автор-> Пост-> Комментарий. Таким образом, у нас есть три слоя: Автор, Пост и Комментарий, позволяющих как
     разграничить права доступа, так и сделать систему масштабируемой.

URI, ресурсы и запросы
Каждый HTTP-запрос состоит из следующих составляющих:
   - HTTP-метод,
   - заголовок,
   - URI,
   - тело запроса.
Ресурсы — это всё, чему можно дать имя.
Можно произвести аналогию с моделями в Django, но ресурсами могут быть также изображения или видео.

URI в REST принято называть множественной формой существительного.

Продолжим наш пример со школами и учениками:
  - /schools — URI всех школ;
  - /schools/76 — URI-информация о школе с id=76.

Для работы с классами:
  - /schools/76/classes/ — информация обо всех классах с id=76;
  - /schools/76/classes/2/ — информация о классе с id=2.

Ну и в эту цепочку можно добавить учеников:
  - /schools/76/classes/2/students — информация обо всех учениках класса;
  - /schools/76/classes/2/students/7 — информация о конкретном ученике.

Помимо этого REST допускает обращение напрямую, если нам не нужно собирать информацию о школе и классе:
  - /students/7 — информация об ученике по его id;
  - /students/ — URI для всех учеников.

HTTP-методы
Обращение к REST-ресурсам происходит с использованием HTTP-методов:
  - GET — получение информации о конкретном ресурсе.
  - POST — создание нового ресурса.
  - PUT — изменение ресурса (по ID).
  - PATCH — частичное изменение ресурса.
  - DELETE — удаление ресурса.


D18.4 OpenAPI
-------------------------------------------------------------------------------
Вы уже поняли, что REST — это круто и он помогает создать прозрачный и понятный API и сильно сократить время, которое
разработчики бы потратили на споры о правильном API.
Но что, если мы скажем, что может быть ещё круче? Бэкенд-разработчикам даже не обязательно писать документацию к
своему API — она может быть сгенерирована автоматически. А у фронтенд-разработчиков появится простой и понятный
инструмент, чтобы проверить и понять, как работают наши запросы. А кроме них тестировщики могут использовать этот же
инструмент для тестирования запросов к API.
Звучит, как сказка? Нет, это OpenAPI.

OpenAPI позволяет быстро и точно описать, какие вопросы можно отправить серверу и какой ждать ответ.
Спецификация OpenAPI представляет из себя файл в формате JSON или YAML. C JSON вы уже знакомы, но в случае с
OpenAPI чаще придётся иметь дело с YAML.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! YAML расшифровывается как YAML Ain't Markup Language («YAML — не язык разметки»).   !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Создатели YAML изначально сказали, что это Yet Another Markup Language («ещё один язык разметки»), но видимо потом
решили, что ну её эту разметку.

YAML представляет собой формат описания данных, похожий на язык Python.
Язык YAML очень прост, у нас вполне получится разобраться с ним по ходу дела.
Итак, начнём разбираться с базового примера спецификации.

openapi: 3.0.2
info:
  title: 'Some application'
  version: "0.1"
paths:
  /schools/:
    get:
      operationId: listSchools
      description: 'List of schools'
      parameters: []
      responses:
        '200':
          content:
          application/json:
            schema:
              type: array
              items:
                  $ref: '#/components/schemas/School'
          description: ''
      tags:
        - schools

    post:
      operationId: createSchool
      description: 'Create school'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
      tags:
        - schools

components:
  schemas:
    School:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 64
      required:
        - name

Возможно, выглядит сложно, а ведь это только фрагмент для одного запроса, а не для всего API, но если вам кажется
скучно и непонятно, то наберитесь терпения и работа с OpenAPI станет похожа на интересную игру.

Разберём по частям.
    openapi: 3.0.2
    info:
      title: 'Some application'
      version: '0.1'
Cначала мы видим описание версии OpenAPI. Мы конечно же используем самую новую — 3.0.2.
А в категории info можно увидеть поля title и version. Описание и текущую версию нашего приложения.
Тут всё просто, идём дальше.

paths:
 /schools/:
   get:
     operationId: listSchools
     description: 'List of schools'
     parameters: []
     responses:
       '200':
         content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/School'
         description: ''
     tags:
     — schools
Дальше идет группа paths со всеми возможными путями. В нашем примере мы ограничимся методами get и post для работы со
школами, ведь у нас и так получится уж очень большой фрагмент кода.
В поле schema мы можем увидеть формат ответа. Тут мы видим, что отдаётся массив, а в его подполе items описание
структуры этого массива, а именно ссылку на описание, которое мы увидим дальше.
Категория tags — это просто список тегов, чтобы не заблудиться в огромном количестве всевозможных запросов.
C get разобрались, время для post.

 post:
     operationId: createSchool
     description: 'Create school'
     parameters: []
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/School'
     responses:
       '201':
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/School'
         description: ''
     tags:
     - schools
Главное отличие здесь в том, что у нас описан не только формат ответа, но и запроса. В данном случае формат запроса
ссылается на тот же компонент '#/components/schemas/School', что мы использовали в качестве элемента списка, а
затем используется.

А еще в категории, как мы видим, код ответа в данном случае 201, ведь именно его принято отдавать, когда
мы создали объект.

Теперь разберём описание структуры компонента.

 schemas:
   School:
     type: object
     properties:
       id:
         type: integer
         readOnly: true
       name:
         type: string
         maxLength: 64
     required:
     - name
Тут мы видим описание того, что такое школа.
Для начала мы видим, что тип школы — это объект, содержащий некоторые поля в properties.
А поля эти — id и name. И как мы видим, только name обязательно требуется. Ведь когда мы создаём объект, мы ещё
не знаем каким будет id.
Настало время разобраться, зачем это нужно.


Swagger
OpenAPI не существует сам по себе, его не нужно просто читать от начала до конца, с ним можно работать при помощи
очень крутых и классных инструментов.
Один из самых известных — это Swagger.
Более того OpenAPI изначально назывался Swagger Specification. Можно даже сказать, что эти два «парня» созданы друг
для друга.
Swagger позволят открывать файл OpenAPI спецификации, просматривать его в красивом интерфейсе и даже отправлять
запросы на основе примеров.

Что же он из себя представляет? По сути, это просто несколько статических файлов, которые лежат на вашем или
каком-то ещё сервере.

Например, можно добавить следующий шаблон:
<!DOCTYPE html>
<html>
    <head>
        <title>Swagger</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" type="text/css" href="//unpkg.com/swagger-ui-dist@3/swagger-ui.css" />
    </head>
    <body>
        <div id="swagger-ui"></div>
        <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js"></script>
        <script>
           const ui = SwaggerUIBundle({
           url: "//lms-cdn.skillfactory.ru/assets/courseware/v1/a084991b3a1596be3ed570c65c56393c/asset-v1:SkillFactory+PDEV+2021+type@asset+block/openapi-schema.yml",
           dom_id: '#swagger-ui',
           presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIBundle.SwaggerUIStandalonePreset
           ],
           layout: "BaseLayout",
           requestInterceptor: (request) => {
                request.headers['X-CSRFToken'] = "{{ csrf_token }}"
                return request;
           }
        })
        </script>
    </body>
</html>
А нашу схему положим в /static/openapi-schema.yml.

А теперь осталось использовать шаблон, и мы готовы!

from django.views.generic import TemplateView

urlpatterns = [
   path('admin/', admin.site.urls),
   path('swagger-ui/', TemplateView.as_view(
       template_name='swagger-ui.html',
       extra_context={'schema_url':'openapi-schema'}
   ), name='swagger-ui'),
   ...
]
Перезапускаем сервер и заходим в браузере на http://localhost:8000/swagger-ui/.
И что же мы видим?

img

Выглядит интригующе! Так давайте попробуем понажимать!

Открываем Post, жмём Try it out и можем сразу слать запросы для проверки.

img

Причем, мы сразу видим, что нужно отослать и чего ожидать. Таким образом, у нас появился крайне удобный инструмент
для тестировщиков и фронтендеров, чтобы проверить и увидеть, как работает сервис.
Заполняем данные о запросе, жмём большую синюю кнопку Execute и получаем результат.

img

Теперь мы не только видим пример, но и то, что наш сервис работает.

Задание 18.4.4
Опишите схему для доступа к элементам news и post на новостном портале.



D18.5 Django REST Framework
-------------------------------------------------------------------------------
Скажете, что это всё круто, но уже полюбили Django, с его моделями, ORM и миграциями...
Но и Django легко подчинить стихии REST. Для этого нужно использовать Django REST Framework, или как его называют
многие разработчики DRF.
И хотя Django включает в себя много различных компонентов  (или как их ещё называют «батареек»), но для максимально
комфортной работы с REST необходимо установить DRF.
Для этого нужно выполнить команды:
    pip install djangorestframework
    pip install markdown
    pip install django-filter

Так легко у нас установились Django REST Framework и ещё две крайне полезные библиотеки.
А значит, мы можем их использовать!

Для начала стоит показать, как выглядят модели в нашем приложении:
    from django.db import models

    class School(models.Model):
        name = models.CharField(max_length=64, unique=True)
        address = models.CharField(max_length=120)

    class SClass(models.Model):
        grade = models.IntegerField()
        school = models.ForeignKey(School, on_delete=models.CASCADE)

    class Student(models.Model):
        name = models.CharField(max_length=64)
        sclass = models.ForeignKey(SClass, on_delete=models.CASCADE)
Модель класса пришлось назвать SClass (School class), так как слово class — зарезервировано в Python.
Ну что ж приступим.

Для начала нам, конечно же, нужно добавить Django REST Framework в список установленных приложений.
В settings.py находим список INSTALLED_APPS и добавляем в него 'rest_framework'.

INSTALLED_APPS = [
   'django.contrib.admin',
   'django.contrib.auth',
   'django.contrib.contenttypes',
   'django.contrib.sessions',
   'django.contrib.messages',
   'django.contrib.staticfiles',
   'education',
   'rest_framework',
]
А значит, теперь мы можем его использовать в нашем проекте.

Следующий этап — добавить сериализаторы. Для этого в папке приложения создаём файл serializers.py и добавляем в него следующее содержание:
    from .models import *
    from rest_framework import serializers


    class SchoolSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = School
            fields = ['id', 'name', ]

    class SClassSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = SClass
            fields = ['id', 'grade', ]

    class StudentSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = Student
            fields = ['id', 'name', ]

Сериализаторы — это классы, которые описывают, по каким правилам модель может преобразовываться в данные и обратно.
Пока тут всё довольно просто, мы просто задаём модель и поля, которые нужно отображать для этой модели. Сериализаторы
чем-то похожи на формы в Django, но обладают более крутыми возможностями, такими как работа со вложенными данными.

Теперь, когда мы добавили сериализаторы, их нужно как-то использовать, ведь не просто так же мы их писали.

Для этого нужно в файле views.py проекта добавить классы вьюсетов:
    from django.shortcuts import render
    from rest_framework import viewsets
    from rest_framework import permissions

    from education.serializers import *
    from education.models import *

    class SchoolViewset(viewsets.ModelViewSet):
        queryset = School.objects.all()
        serializer_class = SchoolSerializer

    class SClassViewset(viewsets.ModelViewSet):
        queryset = SClass.objects.all()
        serializer_class = SClassSerializer

    class StudentViewest(viewsets.ModelViewSet):
        queryset = Student.objects.all()
        serializer_class = StudentSerializer
Вьюсет в DRF это, по сути, тот же view на основе класса, что и обычно, просто у нас появилась возможность наследовать
их от классов, предназначенных для работы с REST.

Раз у нас есть несколько view, которые мы хотим показать, то мы должны зарегистрировать их в urls.py для доступа.

    from rest_framework import routers
    from education import views

    router = routers.DefaultRouter()
    router.register(r'schools', views.SchoolViewset)
    router.register(r'classes', views.SClassViewset)
    router.register(r'students', views.StudentViewest)

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include(router.urls)),
        path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))
    ]

В данном примере мы для простоты не стали использовать слои, к тому же Django REST Framework «из коробки» его не
поддерживает (но для желающих есть библиотека).

Таким образом, у нас есть самый простой вариант RESTful-приложения. Вьюсеты сразу предоставляют реализацию метов GET,
POST, PUT, PATCH, DELETE. А значит, нам не обязательно реализовывать их самостоятельно.

Но что если мы хотим самостоятельно описать, что должно при этом происходить? Конечно же, мы сможем и это сделать.
Например мы можем добавить метод .list() в класс SchoolViews, чтобы он ничего не возвращал.

    from django.shortcuts import render
    from rest_framework import viewsets
    from rest_framework.response import Response
    from rest_framework import permissions

    from education.serializers import SchoolSerializer
    from education.models import School

    class SchoolViewset(viewsets.ModelViewSet):
        queryset = School.objects.all()
        serializer_class = SchoolSerializer
        def list(self, request, format=None):
            return Response([])

Чуть более реальный пример: во время удаления школы мы не хотим удалять её из базы, а хотим чтобы поле is_active
получало значение False, и школа отсутствовала в любых списках.

Для этого посмотрим на обновленный класс школы:
    class School(models.Model):
        name = models.CharField(max_length=64, unique=True)
        address = models.CharField(max_length=120)
        is_active = models.BooleanField(default=True)

Создаем и применяем миграцию:
    python manage.py makemigrations
    python manage.py migrate

И теперь мы можем его использовать в нашем обновлённом вьюсете:
    class SchoolViewset(viewsets.ModelViewSet):
        queryset = School.objects.all().filter(is_active=True)
        serializer_class = SchoolSerializer

        def destroy(self, request, pk, format=None):
            instance = self.get_object()
            instance.is_active = False
            instance.save()
            return Response(status=status.HTTP_204_NO_CONTENT)

В данном случае нам не понадобилось переопределять метод .list(), ведь мы можем переопределить queryset.
Метод .destroy() же в данном случае возвращает код HTTP_204_NO_CONTENT, ведь именно такое поведение является
стандартным для rest_framework.

Аналогично можно переопределить и методы .post(), .patch(), .put().
А если мы хотим изначально определить все методы самостоятельно, то можно использовать в качестве базового класса
rest_framework.viewsets.Model.


Фильтры
Это всё довольно классно. Но у нас возникает следующая проблема. Запрос GET /sudents нам отдаст всех учеников из всех
школ и классов. А для большого города вроде Москвы или Санкт-Петербурга это будут сотни тысяч. А отдавать так много
данных одним большим куском — не самая лучшая идея.

Но и для этого случая есть готовое решение. Всё могло бы быть проще, если бы мы хотя бы указали школу, для которой мы
ищем ученика.

Для этого можем переопределить метод get_queryset внутри вьюсета:
    class StudentViewset(viewsets.ModelViewSet):
        queryset = Student.objects.all()
        serializer_class = StudentSerializer

        def get_queryset(self):
            queryset = Student.objects.all()
            school_id = self.request.query_params.get('school_id', None)
            sclass_id = self.request.query_params.get('class_id', None)
            if school_id is not None:
                queryset = queryset.filter(sclass__school_id=school_id)
            if sclass_id is not None:
                queryset = queryset.filter(sclass_id=sclass_id)
            return queryset

Теперь, если мы зададим запрос вида GET localhost:8000/students?school_id=3, то получим список только тех учеников,
которые учатся в школе с id=3. Помимо этого мы можем указать id класса GET localhost:8000/students?class_id=1.

Выглядит круто, но даже этот код можно было бы и не писать. Ведь, как вы помните, с самого начала мы установили
библиотеку django_filters.

Перейдем к  SClassViewset и переделаем его следующим образом:
    class SClassViewset(viewsets.ModelViewSet):
        queryset = SClass.objects.all()
        serializer_class = SClassSerializer
        filter_backends = [django_filters.rest_framework.DjangoFilterBackend]
        filterset_fields = ["grade", "school_id"]

Поле filter_backends позволяет нам использовать альтернативный фильтр-бэкенд или даже свой собственный, а поле
filterset_fields указывает, по каким полям можно фильтровать.
Теперь мы можем слать запросы вида GET localhost:8000/sclasses?school_id=3.

Фильтры это очень круто, но что если мы всё же хотим получить доступ к списку всех учеников, но выгружать сразу весь
список — не вариант.


Пагинация
Наверняка вам приходилось гуглить что-то специфичное, возможно, даже про Django, и нужный результат не удалось увидеть
на первой странице. И на второй. И даже на пятнадцатой.
И вам приходилось видеть что-то подобное:

    img

Это и есть пример пагинации. Ведь поисковик не может нам сразу показать всё, что нашёл. Хотя нет. Поисковик то может,
но вот у нас компьютер зависнет от полной выдачи по слову «кот».
К счастью в rest_framework уже есть инструмент для пагинации. И даже не нужно ставить другие библиотеки.

Можно просто подключить его в settings.py:
    REST_FRAMEWORK = {
       'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
       'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
       'PAGE_SIZE': 10
    }
Теперь стоит нам послать запрос вида GET localhost:8000/students, мы получим следующий ответ:
    {
       "count": 26877,
       "next": "http://localhost:8000/students/?limit=10&offset=10",
       "previous": null,
       "results": [...]
    }

Таким образом, наша выдача переместилась в атрибут results, а также  появились поля count с количеством результатов, а
поля next и previous содержат ссылки на следующую и предыдущую страницы, если они есть.

Как видим в next используются query-параметры:
  - limit — это то, сколько элементов нужно показать в одном запросе, если не указывать, то он будет считаться равным 0;
  - offset — сколько элементов пропустить в нашем ответе. Если не указывать, то берётся значение 'PAGE_SIZE', которое
             мы указывали в settings.py
Публичный и приватный API
В ходе нашего обучения все методы, с которыми мы работали были доступны для всех желающих без каких-либо проверок.
А это вообще не дело.

Для того чтобы ограничить доступ в rest_framework есть механизм пермиссий.
Их мы можем определить как для всего приложения в целом, так и для отдельных view и viewset.

Если мы снова изменим в settings.py переменную REST_FRAMEWORK, то сможем задать единый стандарт для прав доступа
для всех viewset.

    REST_FRAMEWORK = {
       'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
       'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
       'PAGE_SIZE': 10,
       'DEFAULT_PERMISSION_CLASSES': [
           'rest_framework.permissions.IsAuthenticated',
       ]
    }

Теперь все наши запросы по умолчанию будут доступны только авторизованным пользователям.
Но если вы предпочли бы иметь больше контроля, то можно и не добавлять DEFAULT_PERMISSION_CLASSES, а добавлять их в
каждый конкретный viewset.
Например, добавив поле permission_classes в StudentViewset:
    class StudentViewset(viewsets.ModelViewSet):
        queryset = Student.objects.all()
        serializer_class = StudentSerializer
        permission_classes = [permissions.IsAuthenticated]
        def get_queryset(self):
            queryset = Student.objects.all()
            school_id = self.request.query_params.get('school_id', None)
            sclass_id = self.request.query_params.get('sclass_id', None)
            if school_id is not None:
                queryset = queryset.filter(sclass__school_id=school_id)
            if sclass_id is not None:
                queryset = queryset.filter(sclass_id=sclass_id)
            return queryset

ВАЖНО: permission_classes переопределяет стандартное значение в DEFAULT_PERMISSION_CLASSES, а значит, если мы хотим
отменить, то достаточно переопределить как permission_classes=[permissions.AllowAny] или вообще permission_classes=[].
Теперь, когда у нас включена проверка авторизации, для всех неавторизованных пользователей будет возвращена ошибка
HTTP 403 Forbidden, и это правильно.

Если хотите почитать про права доступа от авторов самого фреймворка, то можете почитать эту статью.


D18.6 Итоги
-------------------------------------------------------------------------------
В этом модуле мы узнали, что такое модель OSI, REST и его принципы и как должен быть устроен RESTful API. Эти знания
помогут нам общаться с разработчиками из других областей на одном языке.

Кроме того знаем, что такое спецификация OpenAPI и главный инструмент работы с ней — Swagger.

Узнали, как подружить REST и Django, и знаем, какая библиотека для этого нужна.


Проект News Portal
-------------------------------------------------------------------------------
Доработайте ваше приложение так, чтобы оно реализовало все принципы REST API:
   1. Для новостей сделать возможность получить их по пути /news.
   2. Аналогично статьи находятся по пути /articles.
   3. Авторизованные пользователи имеют возможность отослать все виды запросов (POST, PUT, DELETE).
   4. Неавторизированные — только читать (GET, HEAD, OPTIONS)

